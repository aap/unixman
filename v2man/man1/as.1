.pa 1
.he '6/15/72''AS (I)'
.ti 0
NAME		as -- assembler
.sp
.ti 0
SYNOPSIS	as__ [ -_ ] name918 ...
.sp
.ti 0
DESCRIPTION	as__
assembles the concatenation of name\d1\u, .... as__
is based on the DEC-provided assembler PAL-11R [1], although
it was coded locally.
Therefore, only the differences will be recorded.
.sp
If the optional first argument
-_ is used,
all undefined symbols in the assembly
are treated as global.
.sp
Character changes are:
.sp
     for    use
      @      *
      #      $
      ;      /
.sp
In as__, the character ";" is a logical new line; several operations
may appear on one line if separated by ";".
Several new expression operators have been provided:
.sp
     \\>     right shift (logical)
     \\<     left shift
     *      multiplication
     \\/     division
.nf
     %      remainder (no longer means "register")
.fi
     !      one's complement
     []     parentheses for grouping
.nf
     ^      result has value of left, type of right
.sp
.fi
For example location 0 (relocatable) can be written "0^.";
another way to denote register 2 is "2^r0".

All of the preceding operators are binary; if
a left operand is missing, it is taken
to be 0.
The "!" operator adds its left operand to the one's
complement of its right operand.

There is a conditional assembly operation code different
from that of PAL-11R (whose conditionals are not provided):
.sp
     .if expression
     ...
     .endif
.sp
If the expression__________ evaluates to non-zero, the section of
code between the ".if" and the ".endif" is assembled; otherwise
it is ignored.  ".if"s may be nested.
.sp
Temporary labels like those introduced by Knuth [2] may
be employed.
A temporary label is defined as follows:
.sp
     n:
.sp
where n_ is a digit 0 ... 9.  Symbols of the form "n_f" refer to the
first label "n_:" following the use of the symbol; those
of the form "n_b" refer to the last "n_:".  The same "n_" may
be used many times.
Labels of this form are less taxing both on the
imagination of the programmer and on the symbol table space
of the assembler.
.sp
The PAL-11R opcodes ".word", ".eot" and ".end" are redundant and are omitted.
.sp
The symbols
.sp
     r0 ... r5
     fr0 ... fr5 (floating-point registers)
     sp
     pc
     ac
     mq
     div
     mul
     lsh
     ash
     nor
     csw
     ..
.sp
are predefined with appropriate values.
The symbol "csw" refers to the console switches.
".." is the relocation constant and is added to
each relocatable reference.
On a PDP-11 with relocation hardware, its value is
0; on most systems without protection,
its value is 40000(8).
.sp
The new opcode "sys" is used to specify system
calls.
Names for system calls are predefined.
See section (II).
.sp
The opcodes "bes" (branch on error set)
and "bec" (branch on error clear)
are defined to test the error status bit
set on return from system calls.
.sp
Strings of characters may be assembled in a way more
convenient than PAL-11's ".ascii" operation (which is,
therefore, omitted).  Strings are included between the
string quotes "<" and ">":
.sp
     <here is a string>
.sp
Escape sequences exist to enter non graphic
and other difficult characters.  These sequences are
also effective in single and double character constants introduced
by single (') and double (") quotes respectively.
.sp
     use___  for___
     \\n   newline (012)
     \\0   NULL (000)
     \\>   >
     \\t   TAB (011)
     \\a   ACK (006)
     \\r   CR (015)
     \\p   ESC (033)
     \\\\   \\ (134)
.sp
as__ provides a primitive segmentation facility.
There are three segments: text____, data____ and
bss___.
The text segment is ordinarily used for
code.  The data segment is provided
for initialized but variable data.
The bss segment cannot be initialized, but
symbols may be defined to lie within this 
segment.
In the future, it is expected that the
text segment will be write-protected and sharable.
Assembly begins in the text segment.
The pseudo-operations

	.text
	.data
	.bss

cause the assembler
to switch to the text, data, or bss segment respectively.
Segmentation is useful at present
for two reasons:
Non-initialized
tables and variables, if placed
in the bss segment, occupy no space in the
output file.
Also, alternative use of the
text and data segments provides a primitive
dual location-counter feature.

In the output file, all text-segment information comes
first, followed by all data-segment information,
and finally bss information.
Within each segment, information appears in
the order written.

Note:
since nothing explicit can be assembled
into the bss segment, the usual appearance
of this segment is in the following style:

	.bss
	var1:	.=.+2
	tab1:	.=.+100.
	...

That is, space is reserved but nothing explicit
is placed in it.

As is evident from the example, it is legal to
assign to the location counter ".".
It is also permissible in segments other than ".bss".
The restriction is made, however,
that the value so assigned must be defined
in the first pass and it must be a value
associated with the same segment as ".".

The pseudo-op

	.comm	symbol,expression

makes symbol______ an undefined global symbol,
and places the value of the expression in
the value field of the symbol's definition.
Thus the above declaration is equivalent to

	.globl	symbol
	symbol = expression ^ symbol

The treatment of such a symbol by the loader ld(I)
is as follows:
If another routine in the same load defines the symbol to be an ordinary
text, data, bss, or absolute symbol,
that definition takes precedence and the symbol
acts like a normal undefined external.
If however no other routine defines the symbol, the loader
defines it as an external bss-segment symbol
and reserves n_ bytes after its location,
where n_ is the value of the expression in the .comm
operation.
Thus ".comm x,100"
effectively declares x to be a common region 100
bytes long.
Note: all such declarations for the same symbol
in various routines should request the same amount
of space.
.sp
The binary output of the assembler is placed on the file "a.out" in the
current directory.
a.out_____ also contains the symbol table from the assembly
and relocation bits.
The output of the assembler is executable immediately
if the assembly was error-free and if there were no
unresolved external references.
The link editor ld__ may be used to combine several
assembly outputs and resolve global symbols.
.sp
The assembler does not produce a listing of the source program.
This is not a serious drawback; the debugger db__ discussed
below is sufficiently powerful to render a printed
octal translation of the source unnecessary.

On the last pages of this section is a list of all the assembler's
built-in symbols.
In the case of instructions, the addressing modes
are as follows:

.nf
	src, dst	source, destination
	r		general register
	fsrc,fdst	floating source, destination
	fr		floating register
	exp		expression

.fi
The names of certain 11/45 opcodes are different
from those in the 11/45 manual;
some were changed to avoid conflict with EAE register names, others
to draw analogies with existing 11/20 instructions.
..pa +2

.ti 0
FILES		/etc/as2	pass 2 of the assembler
.br
/tmp/atm1?	temporary
.br
/tmp/atm2?	temporary
.br
/tmp/atm3?	temporary
.br
a.out		object
.sp
.ti 0
SEE ALSO	ld(I),
nm(I),
sh(I),
un(I),
db(I),
a.out(V),
fptrap(III),
[1] PAL-11R Assembler;
DEC-11-ASDB-D,
[2] Knuth,
.ul
The Art of Computer Programming,
Vol. I; Fundamental Algorithms.
.sp
.ti 0
DIAGNOSTICS	When
an input file cannot be read, its name
followed by a question mark is typed and assembly
ceases.
When syntactic or semantic errors occur, a single-character diagnostic is typed out
together with the line number and the file name in which it
occurred.  Errors in pass 1 cause cancellation of pass 2.
The possible errors are:
.sp
.in +6
.ti -6
)  parentheses error
.ti -6
]  parentheses error
.ti -6
<  String not terminated properly
.ti -6
*  Indirection ("*_") used illegally
.ti -6
.li
.  Illegal assignment to "."
.ti -6
A  error in A_ddress
.ti -6
B  B_ranch instruction is odd or too remote
.ti -6
E  error in E_xpression
.ti -6
F  error in local ("F_" or "b") type symbol
.ti -6
G  G_arbage (unknown) character
.ti -6
I  End of file inside an If__
.ti -6
M  M_ultiply defined symbol as label
.ti -6
O  O_dd-- word quantity assembled at odd address
.ti -6
P  P_hase error-- "." different in pass 1 and 2
.ti -6
R  R_elocation error
.ti -6
U  U_ndefined symbol
.ti -6
X  syntaX_ error
.in -6
.sp
.ti 0
BUGS		Symbol table overflow is not checked.
.sp
If "." is moved backwards by an odd number of bytes,
relocation bits are corrupted.
.sp
.ti 0
OWNER		dmr

Special variables:

.ti +5
.li
.
.ti +5
.li
..

Register:

.ti +5
r0
.ti +5
r1
.ti +5
r2
.ti +5
r3
.ti +5
r4
.ti +5
r5
.ti +5
sp
.ti +5
pc
.ti +5
fr0
.ti +5
fr1
.ti +5
fr2
.ti +5
fr3
.ti +5
fr4
.ti +5
fr5

Eae & switches:

.ti +5
csw
.ti +5
div
.ti +5
ac
.ti +5
mq
.ti +5
mul
.ti +5
sc
.ti +5
sr
.ti +5
nor
.ti +5
lsh
.ti +5
ash

System calls:

.ti +5
exit
.ti +5
fork
.ti +5
read
.ti +5
write
.ti +5
open
.ti +5
close
.ti +5
wait
.ti +5
creat
.ti +5
link
.ti +5
unlink
.ti +5
exec
.ti +5
chdir
.ti +5
time
.ti +5
makdir
.ti +5
chmod
.ti +5
chown
.ti +5
break
.ti +5
stat
.ti +5
seek
.ti +5
tell
.ti +5
mount
.ti +5
umount
.ti +5
setuid
.ti +5
getuid
.ti +5
stime
.ti +5
quit
.ti +5
intr
.ti +5
fstat
.ti +5
cemt
.ti +5
mdate
.ti +5
stty
.ti +5
gtty
.ti +5
ilgins
.ti +5
hog

Double operand:

.ti +5
mov     src,dst
.ti +5
movb       "
.ti +5
cmp        "
.ti +5
cmpb       "
.ti +5
bit        "
.ti +5
bitb       "
.ti +5
bic        "
.ti +5
bicb       "
.ti +5
bis        "
.ti +5
bisb       "
.ti +5
add        "
.ti +5
sub        "

Branch:

.ti +5
br
.ti +5
bne
.ti +5
beq
.ti +5
bge
.ti +5
blt
.ti +5
bgt
.ti +5
ble
.ti +5
bpl
.ti +5
bmi
.ti +5
bhi
.ti +5
blos
.ti +5
bvc
.ti +5
bvs
.ti +5
bhis
.ti +5
bec     (= bcc)
.ti +5
bcc
.ti +5
blo
.ti +5
bcs
.ti +5
bes     (= bcs)

.Single operand:

.ti +5
clr     dst
.ti +5
clrb     "
.ti +5
com      "
.ti +5
comb     "
.ti +5
inc      "
.ti +5
incb     "
.ti +5
dec      "
.ti +5
decb     "
.ti +5
neg      "
.ti +5
negb     "
.ti +5
adc      "
.ti +5
adcb     "
.ti +5
sbc      "
.ti +5
sbcb     "
.ti +5
ror      "
.ti +5
rorb     "
.ti +5
rol      "
.ti +5
rolb     "
.ti +5
asr      "
.ti +5
asrb     "
.ti +5
asl      "
.ti +5
aslb     "
.ti +5
jmp      "
.ti +5
swab     "
.ti +5
tst     src
.ti +5
tstb    src

Miscellaneous:

.ti +5
jsr     r,dst
.ti +5
rts     r
.ti +5
sys     exp    (= trap)

Flag-setting:

.ti +5
clc
.ti +5
clv
.ti +5
clz
.ti +5
cln
.ti +5
sec
.ti +5
sev
.ti +5
sez
.ti +5
sen

Floating point ops:

.ti +5
cfcc
.ti +5
setf
.ti +5
setd
.ti +5
seti
.ti +5
setl
.ti +5
clrf     fdst
.ti +5
negf     fdst
.ti +5
absf     fdst
.ti +5
tstf     fsrc
.ti +5
movf     fsrc,fr (= ldf)
.ti +5
movf     fr,fdst (= stf)
.ti +5
movif    src,fr  (= ldcif)
.ti +5
movfi    fr,dst  (= stcfi)
.ti +5
movof    fsrc,fr (= ldcdf)
.ti +5
movfo    fr,fdst (= stcfd)
.ti +5
addf     fsrc,fr
.ti +5
subf     fsrc,fr
.ti +5
mulf     fsrc,fr
.ti +5
divf     fsrc,fr
.ti +5
cmpf     fsrc,fr
.ti +5
modf     fsrc,fr

11/45 operations

.ti +5
als      src,r   (= ash)
.ti +5
alsc     src,r   (= ashc)
.ti +5
mpy      src,r   (= mul)
.ti +5
dvd      src,r   (= div)
.ti +5
xor      src,r
.ti +5
sxt      dst
.ti +5
mark     exp
.ti +5
sob      r,src

Specials

.ti +5
.li
.byte
.ti +5
.li
.even
.ti +5
.li
.if
.ti +5
.li
.endif
.ti +5
.li
.globl
.ti +5
.li
.text
.ti +5
.li
.data
.ti +5
.li
.bss
.ti +5
.li
.comm
