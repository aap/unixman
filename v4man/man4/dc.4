.th DC IV 8/22/73
.sh NAME
dc \*- DC-11 communications interface
.sh DESCRIPTION
The special files
/dev/tty0, /dev/tty1, ...
refer to the
DC11 asynchronous communications interfaces.
At the moment there are 12 of them, but the number is subject
to change.
.s3
When one of these files is opened, it causes
the process to wait until a connection is established.
In practice user's programs seldom open these
files; they are opened by
.it init
and become a user's
input and output file.
The very first typewriter file open in a process becomes
the
.it "control typewriter"
for that process.  The control typewriter plays a special
role in handling quit or interrupt signals, as discussed
below.
The control typewriter is inherited by a child process during a
.it fork.
.s3
A terminal associated with one of these files ordinarily
operates in full-duplex mode.  Characters may be typed at any time,
even while output is occurring, and are only lost when the
system's character input buffers become completely
choked, which is rare,
or when the user has accumulated the maximum allowed number of
input characters which have not yet been read by some program.
Currently this limit is 256 characters.
When the input limit is reached all the
saved characters are thrown away without notice.
.s3
When first opened,
the interface mode is
150 baud;
either parity accepted;
10 bits/character (one stop bit);
and newline action character.
The system delays transmission after sending certain function characters.
Delays for horizontal tab, newline, and form feed are calculated for
the Teletype Model 37;
the delay for carriage return is calculated for the GE TermiNet 300.
Most of these operating states can be changed
by using the system call stty(II).
In particular
the following hardware states are program settable independently
for input and output (see DC11 manual):
134.5, 150, 300, or 1200 baud;
one or two stop bits on output;
and 5, 6, 7, or 8 data bits/character.
In addition, the following software modes can be invoked:
acceptance of even parity, odd parity, or both;
a raw mode in which all characters may be read one at a time;
a carriage return (CR) mode in which
CR is mapped into newline on input and
either CR or line feed (LF) cause echoing of
the sequence LF-CR;
mapping of upper case letters into lower case;
suppression of echoing;
suppression of delays after function characters;
and the printing of tabs as spaces.
See getty(VII) for the way that terminal speed and type are
detected.
.s3
Normally, typewriter input is processed in units of lines.
This means that a program attempting
to read will be suspended until an entire line has been
typed.  Also, no matter how many characters are requested
in the read call, at most one line will be returned.
It is not however necessary to read a whole line at
once; any number of characters may be
requested in a read, even one, without losing information.
.s3
During input, erase and kill processing is normally
done.
The character `#' erases the
last character typed, except that it will not erase
beyond the beginning of a line or an EOT.
The character `@' kills the entire
line up to the point where it was typed, but not beyond an EOT.  Both these
characters operate on a keystroke basis independently
of any backspacing or tabbing that may have been done.
Either `@' or `#' may be entered literally by preceding
it by `\\';
the erase or kill character remains, but the
`\\' disappears.
.s3
In upper-case mode,
all upper-case letters are mapped into
the corresponding lower-case letter.
The upper-case letter may be generated by preceding
it by `\\'.
In addition, the following escape sequences are generated
on output and accepted on input:
.s3
.lp +14 7
for	use
.lp +15 7
\*g	\\\*a
.lp +15 7
.tr ||
.tc ?
.br
.tr ?
.br
\*v	\\!
.br
.tr ??
.lp +15 7
~	\\^
.lp +15 7
{	\\(
.lp +15 7
}	\\)
.s3
.i0
It is possible to use raw mode in which
the program
reading is awakened on each character.
In raw mode, no erase or kill processing is done;
and the EOT, quit and interrupt characters
are not treated specially.
.s3
The ASCII EOT character may be used to generate an end of file
from a typewriter.
When an EOT is received, all the characters
waiting to be read are immediately passed to
the program, without waiting for a new-line.
Thus if there are no characters waiting, which
is to say the EOT occurred at the beginning of a line,
zero characters will be passed back, and this is
the standard end-of-file signal.
The EOT is not passed on except in raw mode.
.s3
When the carrier signal from the dataset drops (usually
because the user has hung up his terminal)
a
.it hangup
signal is sent to all processes with the typewriter
as control typewriter.
Unless other arrangements have been made,
this signal causes the processes to terminate.
If the hangup signal is ignored, any read
returns with an end-of-file indication.
Thus programs which read a typewriter and test for
end-of-file on their input
can terminate appropriately when
hung up on.
.s3
Two characters have a special meaning when typed.
The ASCII DEL character (sometimes called `rubout')
is not passed to a program but generates
an
.it interrupt
signal
which is sent to all processes with the associated control typewriter.
Normally each such process is forced to terminate,
but arrangements may be made either to
ignore the signal or to reveive a simulated
trap to an agreed-upon location.
See signal (II).
.s3
The ASCII character FS generates the
.it quit
signal.
Its treatment is identical to the interrupt signal
except that unless a receiving process has
made other arrangements it will not only be terminated
but a core image file will be generated.
See signal (II).
.s3
Output is prosaic compared to input.
When one or more
characters are written, they are actually transmitted
to the terminal as soon as previously-written characters
have finished typing.
Input characters are echoed by putting them in the output queue
as they arrive.
When a process produces characters more rapidly than they can be typed,
it will be suspended when its output queue exceeds some limit.
When the queue has drained down to some threshold
the program is resumed.
Even-parity is always generated on output.
The EOT character is not transmitted
(except in raw mode)
to prevent terminals
which respond to it from hanging up.
.sh FILES
/dev/tty[01234567abcd]   113B Dataphones
.sh "SEE ALSO"
kl (IV), getty (VII), stty (I, II), gtty (I, II), signal (II)
.sh BUGS
